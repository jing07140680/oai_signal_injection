diff --git a/executables/nr-ue.c b/executables/nr-ue.c
index 5860d7c64d..677f4dabd3 100644
--- a/executables/nr-ue.c
+++ b/executables/nr-ue.c
@@ -95,6 +95,8 @@
 
 #define RX_JOB_ID 0x1010
 #define TX_JOB_ID 100
+int32_t *DCIbuffer;
+size_t bufferLength;
 
 typedef enum {
   pss = 0,
@@ -505,15 +507,26 @@ static void RU_write(nr_rxtx_thread_data_t *rxtxD) {
 
   void *txp[NB_ANTENNAS_TX];
   for (int i=0; i<UE->frame_parms.nb_antennas_tx; i++)
-    txp[i] = (void *)&UE->common_vars.txdata[i][UE->frame_parms.get_samples_slot_timestamp(
+    txp[i] = (void *)&UE->common_vars.txdata[i][UE->frame_parms.get_samples_slot_timestamp( 
              proc->nr_slot_tx, &UE->frame_parms, 0)];
-
+  //txp[0] = (void *)&DCIbuffer;
+
+  /*
+  int *txp0_as_int_array = (int *)txp[0];
+  int first_element = txp0_as_int_array[0];
+  // Print the first element
+  printf("First element of txp[0]: %d\n", first_element);
+  */
+  
+  // wyj: Modify here
+  LOG_I(PHY,"nr_slot_tx: %d, tx_time_stamp: %d\n",proc->nr_slot_tx ,UE->frame_parms.get_samples_slot_timestamp(
+             proc->nr_slot_tx, &UE->frame_parms, 0));
   radio_tx_burst_flag_t flags = TX_BURST_INVALID;
-
+ 
   NR_UE_MAC_INST_t *mac = get_mac_inst(0);
 
   if (openair0_cfg[0].duplex_mode == duplex_mode_TDD && !get_softmodem_params()->continuous_tx) {
-
+ 
     uint8_t tdd_period = mac->phy_config.config_req.tdd_table.tdd_period_in_slots;
     int nrofUplinkSlots, nrofUplinkSymbols;
     if (mac->scc) {
@@ -527,30 +540,37 @@ static void RU_write(nr_rxtx_thread_data_t *rxtxD) {
 
     int slot_tx_usrp = proc->nr_slot_tx;
     uint8_t  num_UL_slots = nrofUplinkSlots + (nrofUplinkSymbols != 0);
-    uint8_t first_tx_slot = tdd_period - num_UL_slots;
-
+    //uint8_t first_tx_slot = tdd_period - num_UL_slots;
+    uint8_t first_tx_slot = 1;
+    LOG_I(PHY,"slot_tx_usrp: %d, num_UL_slots: %d, first_tx_slot: %d, tdd_period: %d\n", slot_tx_usrp,num_UL_slots,first_tx_slot,tdd_period);
+  
     if (slot_tx_usrp % tdd_period == first_tx_slot)
       flags = TX_BURST_START;
-    else if (slot_tx_usrp % tdd_period == first_tx_slot + num_UL_slots - 1)
-      flags = TX_BURST_END;
-    else if (slot_tx_usrp % tdd_period > first_tx_slot)
-      flags = TX_BURST_MIDDLE;
+    else flags = 0;
+    //else if (slot_tx_usrp % tdd_period == first_tx_slot + num_UL_slots - 1)
+    //flags = TX_BURST_END;
+    //else if (slot_tx_usrp % tdd_period > first_tx_slot)
+    //flags = TX_BURST_MIDDLE;
   } else {
     flags = TX_BURST_MIDDLE;
   }
 
+  LOG_I(PHY,"flags: %d, proc->timestamp_tx: %d\n",flags,proc->timestamp_tx);
   if (flags || IS_SOFTMODEM_RFSIM)
+    printf("rxtxD->writeBlockSize: %d, bufferLength: %d\n",rxtxD->writeBlockSize, bufferLength);
     AssertFatal(rxtxD->writeBlockSize ==
+		//AssertFatal(bufferLength == 
                 UE->rfdevice.trx_write_func(&UE->rfdevice,
                                             proc->timestamp_tx,
                                             txp,
-                                            rxtxD->writeBlockSize,
+					    //bufferLength,
+					    rxtxD->writeBlockSize,
                                             UE->frame_parms.nb_antennas_tx,
                                             flags),"");
-
+  LOG_I(PHY,"we arrive here!\n");
   for (int i=0; i<UE->frame_parms.nb_antennas_tx; i++)
     memset(txp[i], 0, rxtxD->writeBlockSize);
-
+  //memset(txp[0],0,bufferLength);
 }
 
 void processSlotTX(void *arg) {
@@ -560,7 +580,7 @@ void processSlotTX(void *arg) {
   PHY_VARS_NR_UE    *UE   = rxtxD->UE;
   nr_phy_data_tx_t phy_data = {0};
 
-  LOG_D(PHY,"%d.%d => slot type %d\n", proc->frame_tx, proc->nr_slot_tx, proc->tx_slot_type);
+  LOG_I(PHY,"%d.%d => slot type %d\n", proc->frame_tx, proc->nr_slot_tx, proc->tx_slot_type); 
   if (proc->tx_slot_type == NR_UPLINK_SLOT || proc->tx_slot_type == NR_MIXED_SLOT){
 
     // wait for rx slots to send indication (if any) that DLSCH decoding is finished
@@ -669,6 +689,41 @@ void dummyWrite(PHY_VARS_NR_UE *UE,openair0_timestamp timestamp, int writeBlockS
 
 }
 
+void fakeDCI(){
+  // Define the file pointer and the array
+  FILE *file;
+  long fileLen;
+  
+  // Open the binary file in binary read mode
+  file = fopen("test.txt", "rb");
+  
+  // Check if the file was opened successfully
+  if (!file) {
+    perror("Error opening file");
+    return 1;
+  }
+  
+  // Get the file length in bytes
+  fseek(file, 0, SEEK_END);
+  bufferLength = ftell(file);
+  rewind(file);
+
+  // Allocate memory to store the file content
+  DCIbuffer = (int32_t *)malloc(fileLen * sizeof(int32_t));
+  if (!DCIbuffer) {
+    perror("Memory allocation failed");
+    fclose(file);
+    return 1;
+  }
+
+  // Read the file into the buffer
+  fread(DCIbuffer, sizeof(int32_t), fileLen, file);
+
+  LOG_I(PHY,"read in fake DCI: %d\n",DCIbuffer[0]);
+  // Close the file
+  fclose(file);
+}
+
 void readFrame(PHY_VARS_NR_UE *UE,  openair0_timestamp *timestamp, bool toTrash) {
 
   void *rxp[NB_ANTENNAS_RX];
@@ -709,7 +764,7 @@ void syncInFrame(PHY_VARS_NR_UE *UE, openair0_timestamp *timestamp) {
       // Resynchonize by slot (will work with numerology 1 only)
       for ( int size=UE->rx_offset ; size > 0 ; size -= UE->frame_parms.samples_per_subframe/2 ) {
 	int unitTransfer=size>UE->frame_parms.samples_per_subframe/2 ? UE->frame_parms.samples_per_subframe/2 : size ;
-	AssertFatal(unitTransfer ==
+ 	AssertFatal(unitTransfer ==
 		    UE->rfdevice.trx_read_func(&UE->rfdevice,
 					       timestamp,
 					       (void **)UE->common_vars.rxdata,
@@ -718,7 +773,7 @@ void syncInFrame(PHY_VARS_NR_UE *UE, openair0_timestamp *timestamp) {
       }
     } else {
       *timestamp += UE->frame_parms.get_samples_per_slot(1,&UE->frame_parms);
-      for ( int size=UE->rx_offset ; size > 0 ; size -= UE->frame_parms.samples_per_subframe ) {
+      for ( int size=UE->rx_offset ; size > 0 ; size -= UE->frame_parms.samples_per_subframe ) { 
 	int unitTransfer=size>UE->frame_parms.samples_per_subframe ? UE->frame_parms.samples_per_subframe : size ;
 	// we write before read because gNB waits for UE to write and both executions halt
 	// this happens here as the read size is samples_per_subframe which is very much larger than samp_per_slot
@@ -797,6 +852,7 @@ void *UE_thread(void *arg) {
     initNotifiedFIFO(UE->tx_resume_ind_fifo[i]);
   }
 
+  fakeDCI();
   while (!oai_exit) {
 
     if (syncRunning) {
@@ -837,6 +893,7 @@ void *UE_thread(void *arg) {
       }
     }
 
+    
     AssertFatal( !syncRunning, "At this point synchronization can't be running\n");
 
     if (!UE->is_synchronized) {
@@ -886,8 +943,9 @@ void *UE_thread(void *arg) {
     curMsg.proc.rx_slot_type = nr_ue_slot_select(cfg, curMsg.proc.frame_rx, curMsg.proc.nr_slot_rx);
     curMsg.proc.tx_slot_type = nr_ue_slot_select(cfg, curMsg.proc.frame_tx, curMsg.proc.nr_slot_tx);
     curMsg.proc.decoded_frame_rx=-1;
-    //LOG_I(PHY,"Process slot %d total gain %d\n", slot_nr, UE->rx_total_gain_dB);
-
+    //LOG_I(PHY,"Process slot %d total gain %d decoded_frame_rx %d\n", slot_nr, UE->rx_total_gain_dB, curMsg.proc.decoded_frame_rx);
+    // wyj: modify here 
+    LOG_I(PHY,"1: %d,2: %d,3: %d,4: %d\n",curMsg.proc.frame_rx,curMsg.proc.frame_tx,curMsg.proc.nr_slot_rx,curMsg.proc.nr_slot_tx);
 #ifdef OAI_ADRV9371_ZC706
     /*uint32_t total_gain_dB_prev = 0;
     if (total_gain_dB_prev != UE->rx_total_gain_dB) {
@@ -903,7 +961,7 @@ void *UE_thread(void *arg) {
                UE->frame_parms.get_samples_slot_timestamp(slot_nr,&UE->frame_parms,0)];
 
     int readBlockSize, writeBlockSize;
-
+ 
     if (slot_nr<(nb_slot_frame - 1)) {
       readBlockSize=get_readBlockSize(slot_nr, &UE->frame_parms);
       writeBlockSize=UE->frame_parms.get_samples_per_slot((slot_nr + DURATION_RX_TO_TX) % nb_slot_frame, &UE->frame_parms);
@@ -913,19 +971,20 @@ void *UE_thread(void *arg) {
                     UE->rx_offset_diff;
       writeBlockSize=UE->frame_parms.get_samples_per_slot((slot_nr + DURATION_RX_TO_TX) % nb_slot_frame, &UE->frame_parms)- UE->rx_offset_diff;
     }
-
+    printf("readBlockSize:%d\n",readBlockSize);
     AssertFatal(readBlockSize ==
                 UE->rfdevice.trx_read_func(&UE->rfdevice,
                                            &timestamp,
                                            rxp,
                                            readBlockSize,
                                            UE->frame_parms.nb_antennas_rx),"");
-
+ 
     if( slot_nr==(nb_slot_frame-1)) {
       // read in first symbol of next frame and adjust for timing drift
       int first_symbols=UE->frame_parms.ofdm_symbol_size+UE->frame_parms.nb_prefix_samples0; // first symbol of every frames
-
+ 
       if ( first_symbols > 0 ) {
+	LOG_I(PHY,"read in first symbol\n");
         openair0_timestamp ignore_timestamp;
         AssertFatal(first_symbols ==
                     UE->rfdevice.trx_read_func(&UE->rfdevice,
@@ -936,7 +995,7 @@ void *UE_thread(void *arg) {
       } else
         LOG_E(PHY,"can't compensate: diff =%d\n", first_symbols);
     }
-
+  
     // use previous timing_advance value to compute writeTimestamp
     writeTimestamp = timestamp+
       UE->frame_parms.get_samples_slot_timestamp(slot_nr,&UE->frame_parms,DURATION_RX_TO_TX)
@@ -959,7 +1018,8 @@ void *UE_thread(void *arg) {
     curMsgTx->tx_wait_for_dlsch = UE->tx_wait_for_dlsch[curMsgTx->proc.nr_slot_tx];
     UE->tx_wait_for_dlsch[curMsgTx->proc.nr_slot_tx] = 0;
     pushTpool(&(get_nrUE_params()->Tpool), newElt);
-
+    LOG_I(PHY,"curMsg.proc.nr_slot_rx: %d\n",curMsg.proc.nr_slot_rx);
+    /*
     // RX slot processing. We launch and forget.
     newElt = newNotifiedFIFO_elt(sizeof(nr_rxtx_thread_data_t), curMsg.proc.nr_slot_rx, NULL, UE_dl_processing);
     nr_rxtx_thread_data_t *curMsgRx = (nr_rxtx_thread_data_t *) NotifiedFifoData(newElt);
@@ -967,7 +1027,7 @@ void *UE_thread(void *arg) {
     curMsgRx->UE = UE;
     curMsgRx->phy_data = UE_dl_preprocessing(UE, &curMsg.proc);
     pushTpool(&(get_nrUE_params()->Tpool), newElt);
-
+ 
     if (curMsg.proc.decoded_frame_rx != -1)
       decoded_frame_rx=(((mac->mib->systemFrameNumber.buf[0] >> mac->mib->systemFrameNumber.bits_unused)<<4) | curMsg.proc.decoded_frame_rx);
     else
@@ -976,7 +1036,7 @@ void *UE_thread(void *arg) {
     if (decoded_frame_rx>0 && decoded_frame_rx != curMsg.proc.frame_rx)
       LOG_E(PHY,"Decoded frame index (%d) is not compatible with current context (%d), UE should go back to synch mode\n",
             decoded_frame_rx, curMsg.proc.frame_rx);
-
+    */
     // Wait for TX slot processing to finish
     notifiedFIFO_elt_t *res;
     res = pullTpool(&txFifo, &(get_nrUE_params()->Tpool));
diff --git a/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c b/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
index 7326d187a4..46a1bbbbcd 100644
--- a/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
+++ b/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
@@ -441,7 +441,7 @@ int nr_ue_process_dci_indication_pdu(module_id_t module_id,int cc_id, int gNB_in
   NR_UE_MAC_INST_t *mac = get_mac_inst(module_id);
   dci_pdu_rel15_t *def_dci_pdu_rel15 = &mac->def_dci_pdu_rel15[slot][dci->dci_format];
 
-  LOG_D(MAC,"Received dci indication (rnti %x,dci format %d,n_CCE %d,payloadSize %d,payload %llx)\n",
+  LOG_I(MAC,"Received dci indication (rnti %x,dci format %d,n_CCE %d,payloadSize %d,payload %llx)\n",
 	dci->rnti,dci->dci_format,dci->n_CCE,dci->payloadSize,*(unsigned long long*)dci->payloadBits);
   int8_t ret = nr_extract_dci_info(mac, dci->dci_format, dci->payloadSize, dci->rnti, dci->ss_type, (uint64_t *)dci->payloadBits, def_dci_pdu_rel15, slot);
   if ((ret&1) == 1) return -1;
diff --git a/radio/USRP/USERSPACE/LIB/usrp_lib.cpp b/radio/USRP/USERSPACE/LIB/usrp_lib.cpp
index 8053411516..8cb35a59fb 100644
--- a/radio/USRP/USERSPACE/LIB/usrp_lib.cpp
+++ b/radio/USRP/USERSPACE/LIB/usrp_lib.cpp
@@ -398,6 +398,8 @@ static int trx_usrp_write(openair0_device *device,
 			  int nsamps,
 			  int cc,
 			  int flags) {
+
+  printf("trx_usrp_write nsamps:%d, flags:%d\n",nsamps,flags);
   int ret=0;
   usrp_state_t *s = (usrp_state_t *)device->priv;
   int nsamps2;  // aligned to upper 32 or 16 byte boundary
@@ -510,7 +512,7 @@ VCD_SIGNAL_DUMPER_DUMP_FUNCTION_BY_NAME(VCD_SIGNAL_DUMPER_FUNCTIONS_BEAM_SWITCHI
       write_thread->end = write_thread->start;
       write_thread->count_write = 0;
     }
-
+  
     end = write_thread->end;
     write_package[end].timestamp    = timestamp;
     write_package[end].nsamps       = nsamps;
