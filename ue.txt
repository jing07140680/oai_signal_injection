diff --git a/openair1/PHY/MODULATION/slot_fep_nr.c b/openair1/PHY/MODULATION/slot_fep_nr.c
index dee8253388..35d432a90c 100644
--- a/openair1/PHY/MODULATION/slot_fep_nr.c
+++ b/openair1/PHY/MODULATION/slot_fep_nr.c
@@ -71,7 +71,7 @@ int nr_slot_fep(PHY_VARS_NR_UE *ue,
 
 //#ifdef DEBUG_FEP
   //  if (ue->frame <100)
-  LOG_D(PHY,"slot_fep: slot %d, symbol %d, nb_prefix_samples %u, nb_prefix_samples0 %u, rx_offset %u energy %d\n",
+  LOG_I(PHY,"slot_fep: slot %d, symbol %d, nb_prefix_samples %u, nb_prefix_samples0 %u, rx_offset %u energy %d\n",
   Ns, symbol, nb_prefix_samples, nb_prefix_samples0, rx_offset, dB_fixed(signal_energy((int32_t *)&common_vars->rxdata[0][rx_offset],frame_parms->ofdm_symbol_size)));
   //#endif
 
diff --git a/openair1/PHY/NR_UE_ESTIMATION/nr_adjust_synch_ue.c b/openair1/PHY/NR_UE_ESTIMATION/nr_adjust_synch_ue.c
index feed70b854..41af3f9b93 100644
--- a/openair1/PHY/NR_UE_ESTIMATION/nr_adjust_synch_ue.c
+++ b/openair1/PHY/NR_UE_ESTIMATION/nr_adjust_synch_ue.c
@@ -27,7 +27,7 @@
 #include "executables/softmodem-common.h"
 #include "common/utils/LOG/vcd_signal_dumper.h"
 
-//#define DEBUG_PHY
+#define DEBUG_PHY
 
 // Adjust location synchronization point to account for drift
 // The adjustment is performed once per frame based on the
@@ -54,7 +54,7 @@ void nr_adjust_synch_ue(NR_DL_FRAME_PARMS *frame_parms,
 
   short ncoef = 32767 - coef;
 
-  LOG_D(PHY,"AbsSubframe %d: rx_offset (before) = %d\n",subframe,ue->rx_offset);
+  LOG_I(PHY,"AbsSubframe %d: rx_offset (before) = %d\n",subframe,ue->rx_offset);
 
   // search for maximum position within the cyclic prefix
   for (int i = -frame_parms->nb_prefix_samples/2; i < frame_parms->nb_prefix_samples/2; i++) {
diff --git a/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c b/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
index 494e8a7de0..a48bcda244 100644
--- a/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
+++ b/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
@@ -919,12 +919,12 @@ uint8_t nr_dci_decoding_procedure(PHY_VARS_NR_UE *ue,
       LOG_D(PHY, "(%i.%i) dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d,payload %llx )\n",
             proc->frame_rx, proc->nr_slot_rx,n_rnti,nr_dci_format_string[rel15->dci_format_options[k]],CCEind,dci_length, *(unsigned long long*)dci_estimation);
       if (crc == n_rnti) {
-        LOG_D(PHY, "(%i.%i) Received dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d,payload %llx)\n",
+        LOG_I(PHY, "(%i.%i) Received dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d,payload %llx)\n",
               proc->frame_rx, proc->nr_slot_rx,n_rnti,nr_dci_format_string[rel15->dci_format_options[k]],CCEind,dci_length,*(unsigned long long*)dci_estimation);
         uint16_t mb = nr_dci_false_detection(dci_estimation,tmp_e,L*108,n_rnti, NR_POLAR_DCI_MESSAGE_TYPE, dci_length, L);
         ue->dci_thres = (ue->dci_thres + mb) / 2;
         if (mb > (ue->dci_thres+30)) {
-          LOG_W(PHY,"DCI false positive. Dropping DCI index %d. Mismatched bits: %d/%d. Current DCI threshold: %d\n",j,mb,L*108,ue->dci_thres);
+          LOG_I(PHY,"DCI false positive. Dropping DCI index %d. Mismatched bits: %d/%d. Current DCI threshold: %d\n",j,mb,L*108,ue->dci_thres);
           continue;
         }
         else {
diff --git a/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c b/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
index 8dec02b0a1..91697e8ec1 100644
--- a/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
+++ b/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
@@ -74,7 +74,7 @@ fifo_dump_emos_UE emos_dump_UE;
 #include "UTIL/OPT/opt.h"
 #include "intertask_interface.h"
 #include "T.h"
-
+ 
 #if defined(OAI_USRP) || defined(OAI_BLADERF) || defined(OAI_LMSSDR) || defined(OAI_ADRV9371_ZC706)
 extern uint64_t downlink_frequency[MAX_NUM_CCs][4];
 #endif
@@ -87,7 +87,7 @@ void nr_fill_dl_indication(nr_downlink_indication_t *dl_ind,
                            UE_nr_rxtx_proc_t *proc,
                            PHY_VARS_NR_UE *ue,
                            void *phy_data)
-{
+{  
   memset((void*)dl_ind, 0, sizeof(nr_downlink_indication_t));
 
   dl_ind->gNB_index = proc->gNB_id;
@@ -125,7 +125,7 @@ void nr_fill_rx_indication(fapi_nr_rx_indication_t *rx_ind,
   }
 
   NR_DL_UE_HARQ_t *dl_harq0 = NULL;
-
+ 
   if ((pdu_type !=  FAPI_NR_RX_PDU_TYPE_SSB) && dlsch0) {
     dl_harq0 = &ue->dl_harq_processes[0][dlsch0->dlsch_config.harq_process_nbr];
     trace_NRpdu(DIRECTION_DOWNLINK,
@@ -320,7 +320,7 @@ void nr_ue_measurement_procedures(uint16_t l,
       ue->common_vars.rxdata);
 
     nr_ue_measurements(ue, proc, dlsch, pdsch_est_size, dl_ch_estimates);
-
+ 
 #if T_TRACER
     if(nr_slot_rx == 0)
       T(T_UE_PHY_MEAS, T_INT(gNB_id),  T_INT(ue->Mod_id), T_INT(frame_rx%1024), T_INT(nr_slot_rx),
@@ -901,7 +901,7 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
           __attribute__ ((aligned(32))) struct complex16 dl_ch_estimates_time[fp->nb_antennas_rx][fp->ofdm_symbol_size];
 
           for (int i=1; i<4; i++) {
-            nr_slot_fep(ue,
+            nr_slot_fep(ue, 
                         proc,
                         (ssb_start_symbol+i)%(fp->symbols_per_slot),
                         rxdataF);
@@ -928,11 +928,11 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
 
           if(ssb_index == fp->ssb_index) {
 
-            LOG_D(PHY," ------  Decode MIB: frame.slot %d.%d ------  \n", frame_rx%1024, nr_slot_rx);
+            LOG_I(PHY, "Decode MIB: frame.slot %d.%d ------  \n", frame_rx%1024, nr_slot_rx);
             nr_ue_pbch_procedures(ue, proc, estimateSz, dl_ch_estimates, phy_data, rxdataF);
 
             if (ue->no_timing_correction==0) {
-              LOG_D(PHY,"start adjust sync slot = %d no timing %d\n", nr_slot_rx, ue->no_timing_correction);
+              LOG_I(PHY,"start adjust sync slot = %d no timing %d\n", nr_slot_rx, ue->no_timing_correction);
               nr_adjust_synch_ue(fp,
                                  ue,
                                  gNB_id,
@@ -951,7 +951,7 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
       }
     }
   }
-
+ 
   // Check for PRS slot - section 7.4.1.7.4 in 3GPP rel16 38.211
   for(int gNB_id = 0; gNB_id < ue->prs_active_gNBs; gNB_id++)
   {
@@ -980,7 +980,7 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
     } // for rsc_id
   } // for gNB_id
 
-  if ((frame_rx%64 == 0) && (nr_slot_rx==0)) {
+  if ((frame_rx%64 == 0) && (nr_slot_rx==1)) {
     LOG_I(NR_PHY,"============================================\n");
     // fixed text + 8 HARQs rounds Ã  10 ("999999999/") + NULL
     // if we use 999999999 HARQs, that should be sufficient for at least 138 hours
@@ -992,7 +992,6 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
     for (int round = 1; round < 16 && (round < 3 || ue->dl_stats[round] != 0); ++round)
       p += snprintf(p, end - p,"/%d", ue->dl_stats[round]);
     LOG_I(NR_PHY,"%s\n", output);
-
     LOG_I(NR_PHY,"============================================\n");
   }
 
@@ -1003,7 +1002,6 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
 
   uint8_t nb_symb_pdcch = phy_pdcch_config->nb_search_space > 0 ? phy_pdcch_config->pdcch_config[0].coreset.duration : 0;
   for (uint16_t l=0; l<nb_symb_pdcch; l++) {
-
     start_meas(&ue->ofdm_demod_stats);
     nr_slot_fep(ue,
                 proc,
@@ -1018,9 +1016,9 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
   uint8_t dci_cnt = 0;
   for(int n_ss = 0; n_ss<phy_pdcch_config->nb_search_space; n_ss++) {
     for (uint16_t l=0; l<nb_symb_pdcch; l++) {
-
+      // wyj sep 26 8:00 pm
       // note: this only works if RBs for PDCCH are contigous!
-
+      LOG_D(PHY, "pdcch channel estimation here\n");
       nr_pdcch_channel_estimation(ue,
                                   proc,
                                   l,
@@ -1029,17 +1027,15 @@ void pbch_pdcch_processing(PHY_VARS_NR_UE *ue,
                                   phy_pdcch_config->pdcch_config[n_ss].BWPStart,
                                   pdcch_est_size,
                                   pdcch_dl_ch_estimates,
-                                  rxdataF);
-
+                                  rxdataF); 
       stop_meas(&ue->ofdm_demod_stats);
-
-    }
+    } 
     dci_cnt = dci_cnt + nr_ue_pdcch_procedures(ue, proc, pdcch_est_size, pdcch_dl_ch_estimates, phy_data, n_ss, rxdataF);
   }
   LOG_D(PHY,"[UE %d] Frame %d, nr_slot_rx %d: found %d DCIs\n", ue->Mod_id, frame_rx, nr_slot_rx, dci_cnt);
   phy_pdcch_config->nb_search_space = 0;
   VCD_SIGNAL_DUMPER_DUMP_FUNCTION_BY_NAME(VCD_SIGNAL_DUMPER_FUNCTIONS_UE_SLOT_FEP_PDCCH, VCD_FUNCTION_OUT);
-}
+} 
 
 void pdsch_processing(PHY_VARS_NR_UE *ue,
                       UE_nr_rxtx_proc_t *proc,
@@ -1062,7 +1058,7 @@ void pdsch_processing(PHY_VARS_NR_UE *ue,
     VCD_SIGNAL_DUMPER_DUMP_FUNCTION_BY_NAME(VCD_SIGNAL_DUMPER_FUNCTIONS_UE_SLOT_FEP_PDSCH, VCD_FUNCTION_IN);
     uint16_t nb_symb_sch = dlsch[0].dlsch_config.number_symbols;
     uint16_t start_symb_sch = dlsch[0].dlsch_config.start_symbol;
-
+ 
     LOG_D(PHY," ------ --> PDSCH ChannelComp/LLR Frame.slot %d.%d ------  \n", frame_rx%1024, nr_slot_rx);
     //to update from pdsch config
 
